#include<iostream>
using namespace std;

class Hotel{
	private:
		struct Node{ // Corrected spelling from "node" to "Node"
			int id, date;
			string name, roomtype;
			Node *next;
		};
		
	public:
		Node* head = NULL; // Corrected spelling from "Null" to "NULL"
		void insert();
		void menu();
		void search();
		void update();
		void del();
		void sort();
		void show();
};

void Hotel::menu() // Corrected function name from "library::menu()" to "Hotel::menu()"
{
	int choice;
	cout<<"\n";
	cout<<"\tWelcome to hotel management system\n"<<endl;
	cout<<"\n\t__Hotel management system__";
	cout<<"\n\nS.No   functions            Description"<<endl;
	cout<<"\n1\tAllocate Room\t\t\tInsert New Room";
	cout<<"\n2\tSearch Room\t\t\tRoom with RoomID";
	cout<<"\n3\tUpdate Room\t\t\tUpdate Room record";
	cout<<"\n4\tDelete Room\t\t\tDelete Room with RoomID";
	cout<<"\n5\tShow room records\t\t\tshow room records that(we added)";
	cout<<"\n6\tExit"<<endl;
	
	cout<<"Enter your choice"<<endl;
	cin>>choice;
	switch(choice)
	{
		case 1:
			insert();
			menu();
			break; // Added break statement to exit switch after each case
		case 2:
			search();
			menu();
			break;
		case 3:
			update();
			menu();
			break;
		case 4:
			del();
			menu();
			break;
		case 5:
			sort();
			show();
			menu();
			break;
		case 6:
			cout << "Exiting..."; // Added case for exiting
			break;
		default:
			cout<<"Invalid";
			break; // Added default case
	}
	
}

void Hotel::insert()
{
	cout<<"\n\t___Hotel Management System___";
	Node  *new_node = new Node;
	cout<<"\nEnter Room ID"<<endl;
	cin>>new_node->id;
	cout<<"\nEnter customer Name"<<endl;
	cin>>new_node->name;
	cout<<"\nEnter Allocated Date"<<endl;
	cin>>new_node->date;
	cout<<"\nEnter room type(single/double/twin)"<<endl; // Corrected spelling from "coutt" to "cout"
	cin>>new_node->roomtype;
	
	if(head==NULL)
	{
		head = new_node; // Corrected assignment from "head =new_node;" to "head = new_node;"
	}
	else{
		Node* ptr = head;
		while(ptr->next != NULL) // Corrected spelling from "Null" to "NULL"
		{
			ptr = ptr->next;
		}
		ptr->next = new_node;
	}
	cout<<"\n\n\t\t New Room Inserted";
}

void Hotel::search()
{
	cout<<"\n\t___Hotel Management System___";
       int t_id;
	
	if(head==NULL)
	{
		cout<<"\n\nLinked list is empty"; // Added semicolon at the end
	}
	else{
		cout<<"\n\nRoom ID";
		cin>>t_id;
		Node* ptr = head;
		while(ptr!=NULL) // Corrected spelling from "Null" to "NULL"
		{
			if(t_id == ptr->id)
			{
				cout<<"\n\nRoom id"<<ptr->id;
				cout<<"\n\nCustomer Name"<<ptr->name;
				cout<<"\n\nRoom Allocated Date"<<ptr->date;
				cout<<"\n\nRoom Type"<<ptr->roomtype;
			}
			ptr = ptr->next;
	       }
       }       
		
}

void Hotel::update()
{
	cout<<"\n\t___Hotel Management System___";
	int t_id;
	
	if(head==NULL)
	{
		cout<<"\n\nLinked list is empty";
	}
	else{
		cout<<"\n\nRoom Id"; // Added semicolon at the end
		cin>>t_id;
		Node *ptr = head;
		while(ptr!=NULL) // Corrected spelling from "Null" to "NULL"
		{
			if(t_id==ptr->id)
			{
				cout<<"\n\nRoomID";
				cin>>ptr->id;
				
				cout<<"\n\nCustomer Name ";
				cin>>ptr->name;
				
				cout<<"\n\nAllocated Date";
				cin>>ptr->date;
				
				cout<<"\n\nRoomID";
				cin>>ptr->roomtype;
				
				cout<<"\n\n\t\t Update Record Successfully";
				
			}
			ptr = ptr->next;
		}
	}
} // Removed extra "}" before this function

void Hotel::del()
{
    cout<<"\n\t___Hotel Management System___";
    int t_id;
    if(head==NULL)
    {
        cout<<"\n\nLinked list is empty";
    }
    else
    {
        cout<<"\n\nRoom ID";
        cin>>t_id;
        Node *ptr = head;
        if(t_id == head->id) // If the node to delete is the head
        {
            head = head->next;
            delete ptr;
            cout<<"Delete Room Record Successfully\n";
        }
        else
        {
            Node* pre = head;
            ptr = head->next;
            while(ptr != NULL)
            {
                if(t_id == ptr->id)
                {
                    pre->next = ptr->next;
                    delete ptr;
                    cout<<"Delete Room Record Successfully\n";
                    break;
                }
                pre = ptr;
                ptr = ptr->next;
            }
            if(ptr == NULL)
            {
                cout << "Room ID not found\n";
            }
        }
    }
}

void Hotel::show()
{
	Node* ptr = head;
	while (ptr!=NULL) // Corrected spelling from "Null" to "NULL"
	{
		cout<<"\n\nRoomID"<<ptr->id;
		cout<<"\n\ncustomer name"<<ptr->name;
		cout<<"\n\nAllocated date"<<ptr->date;
		cout<<"\n\nRoom type"<<ptr->roomtype;
		ptr = ptr->next;
		
	}
}

void Hotel::sort()
{
	if(head==NULL)
	{
		cout<<"\n\nLinked list is empty";
		menu(); // Changed "menu();" to "menu();" to go back to the main menu
	}
	int count = 0, t_date, t_id;
	string t_name, t_roomtype;
	Node* ptr = head;
	while (ptr!=NULL) // Corrected spelling from "Null" to "NULL"
	{
		count++;
		ptr = ptr->next;
	}
	for(int i=1; i<=count; i++)
	{
		Node *ptr = head;
		for(int j =1; j<count; j++)
		{
			if(ptr->id > ptr->next->id)
			{
				t_id=ptr->id;
				t_name=ptr->name;
				t_date=ptr->date;
				t_roomtype=ptr->roomtype;
				ptr->id=ptr->next->id;
				ptr->name=ptr->next->name;
				ptr->date=ptr->next->date;
				ptr->roomtype=ptr->next->roomtype;
				ptr->next->id = t_id;
				ptr->next->name = t_name;
				ptr->next->date = t_date;
				ptr->next->roomtype = t_roomtype;
				
			}
			ptr = ptr->next;
		}
	}
}

int main()
{
	Hotel h;
	h.menu(); // Added semicolon to end function call
	return 0; // Added return statement
}
